#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

typedef struct node NODE;

NODE* start = NULL, *p, *q;

void createstart() {
    p = (NODE*)malloc(sizeof(NODE));
    if (p == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    scanf("%d", &p->data);
    p->next = start;
    start = p;
}

void createend() {
    p = (NODE*)malloc(sizeof(NODE));
    if (p == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    scanf("%d", &p->data);
    p->next = NULL;
    if (start == NULL) {
        start = p;
    } else {
        q = start;
        while (q->next != NULL) {
            q = q->next;
        }
        q->next = p;
    }
}

void createAtPosition(int position) {
    int i;
    p = (NODE*)malloc(sizeof(NODE));
    if (p == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    scanf("%d", &p->data);
    if (position == 1) {
        createstart();
    } else {
        q = start;
        for (i = 1; i < position - 1 && q != NULL; i++) {
            q = q->next;
        }
        if (q == NULL) {
            printf("Position can't be reached\n");
            free(p);
        } else {
            p->next = q->next;
            q->next = p;
        }
    }
}

void deleteFirst() {
    if (start == NULL) {
        printf("Linked list is empty\n");
        return;
    }
    q = start;
    start = start->next;
    free(q);
}

void deleteLast() {
    if (start == NULL) {
        printf("Linked list is empty\n");
        return;
    }
    q = start;
    if (q->next == NULL) {
        free(q);
        start = NULL;
    } else {
        while (q->next != NULL && q->next->next != NULL) {
            q = q->next;
        }
        free(q->next);
        q->next = NULL;
    }
}

void deleteAtPosition(int position) {
    if (position < 1) {
        printf("Invalid position!\n");
        return;
    }
    if (position == 1) {
        deleteFirst();
        return;
    }
    q = start;
    for (int i = 1; i < position - 1 && q != NULL; i++) {
        q = q->next;
    }
    if (q == NULL || q->next == NULL) {
        printf("Position not found!\n");
        return;
    }
    p = q->next;
    q->next = p->next;
    free(p);
}

void traverse() {
    if (start == NULL) {
        printf("\nLinked list is empty\n");
    } else {
        q = start;
        while (q != NULL) {
            printf("%d ", q->data);
            q = q->next;
        }
        printf("\n");
    }
}

int main() {
    int ch, position;
    while (1) {
        printf("\n1. Add at the beginning\n");
        printf("2. Add at the end\n");
        printf("3. Add at position\n");
        printf("4. Delete at the beginning\n");
        printf("5. Delete at the end\n");
        printf("6. Delete at position\n");
        printf("7. Traverse\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                createstart();
                break;
            case 2:
                createend();
                break;
            case 3:
                printf("Enter position: ");
                scanf("%d", &position);
                createAtPosition(position);
                break;
            case 4:
                deleteFirst();
                break;
            case 5:
                deleteLast();
                break;
            case 6:
                printf("Enter position: ");
                scanf("%d", &position);
                deleteAtPosition(position);
                break;
            case 7:
                traverse();
                break;
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
