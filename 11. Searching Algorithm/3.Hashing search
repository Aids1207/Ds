#include <stdio.h>
#include <stdlib.h>
#define TABLE_SIZE 5

struct Node {
    int data;
    struct Node* next;
};

int hashFunction(int key) {
    return key % TABLE_SIZE;
}

void insert(struct Node* hashTable[], int key) {
    int hashIndex = hashFunction(key);
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = key;
    newNode->next = hashTable[hashIndex];
    hashTable[hashIndex] = newNode;
}

int search(struct Node* hashTable[], int key) {
    int hashIndex = hashFunction(key);
    struct Node* temp = hashTable[hashIndex];
    while (temp) {
        if (temp->data == key) {
            return 1;
        }
        temp = temp->next;
    }
    return 0;
}

int main() {
    struct Node* hashTable[TABLE_SIZE] = {NULL};
    int keys[] = {12, 25, 35, 26, 15};
    for (int i = 0; i < 5; i++) {
        insert(hashTable, keys[i]);
    }
    int target = 26;
    if (search(hashTable, target)) {
        printf("Element found in the hash table.\n");
    } else {
        printf("Element not found in the hash table.\n");
    }
    return 0;
}
